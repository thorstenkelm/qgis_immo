# -*- coding: utf-8 -*-
"""
/***************************************************************************
 gqisImmoDialog
                                 A QGIS plugin
 TODO
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-06-19
        git sha              : $Format:%H$
        copyright            : (C) 2019 by TODO
        email                : TODO
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

import pandas as pd
from PyQt5 import QtWidgets, QtGui
from PyQt5 import uic
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from qgis.core import QgsProject

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'qgis_immo_dialog_base.ui'))


class gqisImmoDialog(QtWidgets.QDialog, FORM_CLASS):
    fieldnames = None  # saves fieldnames
    input_path = None  # saves input path
    separator = ";"  # saves the separator, defaults to ";"
    df = None  # saves the input csv as a pandas DataFrame
    model = None  # saves the list view model

    def __init__(self, parent=None):
        """Constructor."""
        super(gqisImmoDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

    def fill_combo_box_with_fieldnames(self):
        """
        This slot adds the fieldnames of the selected csv-file to the target field combo box.
        It checks if the filepath points to a csv file. If not the user gets a warning.
        """
        input_path = self.input_file_path.text()
        if os.path.isfile(input_path):
            df = pd.read_csv(input_path, sep=gqisImmoDialog.separator)
            # get fieldnames
            fieldnames = list(df.columns)

            if self.target_field_combo.isEnabled() == False:
                self.target_field_combo.setEnabled(True)

            # clear previous input
            self.target_field_combo.clear()

            # update the combo box
            for field in fieldnames:
                self.target_field_combo.addItem(field)

            # save input path for later use
            gqisImmoDialog.input_path = input_path
            # save df for later use
            gqisImmoDialog.df = df
            # save fieldnames for later use
            gqisImmoDialog.fieldnames = fieldnames

            gqisImmoDialog.fill_list_view_with_fieldnames(self)
            if self.regression_fields.isEnabled() == False:
                self.regression_fields.setEnabled(True)

            if self.numeric_fields.isChecked():
                self.filter_numeric_fields()
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setWindowTitle("Warning")
            msg.setText("The given filepath is not valid.")
            msg.setStandardButtons(QMessageBox.Ok)
            msg.exec_()  # show the messagebox

    def select_file(self):
        # try to open the file selection dialog in the current project directory
        # if no project is open it will default to the directory from which QGIS was opened
        # filter is set to .csv files
        project_dir = QgsProject.instance().absolutePath()
        file_path = QFileDialog.getOpenFileName(self, "Open File", project_dir, "Text files (*.csv)")
        # set file_path as text for the QLineEdit 'input_file_path'
        # file_path is a tuple. The first element is the file path.
        self.input_file_path.setText(file_path[0])

    def filter_numeric_fields(self):
        """
        checks if numeric_fields is True or False.
        If it is True this slot hides non numeric fields.
        If it is False all currently hidden fields will be shown.
        A field is non numeric as soon as one if the values in its rows is not a number or
        can not be parsed to a number.
        Empty values are allowed.
        nan values are allowed.
        """
        if self.numeric_fields.isChecked() == True:
            # remove non numeric fields from list view and combo box
            # iterate over fields and check for each row if cell is numeric, empty or "NA"
            for col in gqisImmoDialog.df:
                numeric = True
                for i, data in gqisImmoDialog.df[col].iteritems():
                    # if all cells are numeric, empty or "NA" field is numeric
                    # if not field is not numeric
                    if is_numeric(data) is False:
                        numeric = False
                if numeric is False:
                    # remove non numeric fields from target field
                    self.target_field_combo.removeItem(self.target_field_combo.findText(col))
                    # remove non numeric fields from list view

                    i = 0
                    while gqisImmoDialog.model.item(i):
                        if gqisImmoDialog.model.item(i).text() == col:
                            gqisImmoDialog.model.removeRow(i)
                        i += 1
        else:
            # show all field names
            gqisImmoDialog.fill_combo_box_with_fieldnames(self)
            gqisImmoDialog.fill_list_view_with_fieldnames(self)

    def fill_list_view_with_fieldnames(self):
        """
        Adds all fieldnames except the target field as list items.
        """
        model = QtGui.QStandardItemModel()
        gqisImmoDialog.model = model
        self.regression_fields.setModel(model)
        for field in gqisImmoDialog.fieldnames:
            if field == self.target_field_combo.currentText():
                pass
            else:
                item = QtGui.QStandardItem(field)
                model.appendRow(item)

        if self.numeric_fields.isEnabled() == False:
            self.numeric_fields.setEnabled(True)

        if self.save_fields.isEnabled() == False:
            self.save_fields.setEnabled(True)

        if self.numeric_fields.isChecked():
            self.filter_numeric_fields()

    def save_fields(self):
        """
        TODO
        saves which fields are selected when this method is called.
        """
        # ???
        pass

    def set_separator(self):
        """
        Slot that sets the separator to use when reading a csv file.
        """
        sender = self.sender()
        if sender == self.comma_radio_btn:
            gqisImmoDialog.separator = ","
        if sender == self.semicolon_radio_btn:
            gqisImmoDialog.separator = ";"
        if sender == self.tab_radio_btn:
            gqisImmoDialog.separator = "\t"
        if sender == self.space_radio_btn:
            gqisImmoDialog.separator = " "


def is_numeric(data):
    """
    checks if data is numeric.
    :param data: the data to check
    :return: true if data is numeric, false if data is not numeric
    """
    if isinstance(data, str):
        data = data.replace(",", ".")
        data = data.strip(" ")
        try:
            # try parsing to int
            int(data)
            return True
        except ValueError:
            try:
                # try parsing to float
                float(data)
                return True
            except ValueError:
                return False
            return False

    elif isinstance(data, int):
        return True
    elif isinstance(data, float):
        return True

    return False
