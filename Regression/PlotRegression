import pandas as pd
import numpy as np
from scipy import stats
from dfply import *
import matplotlib.pyplot as plt  # To visualize
import seaborn as sns
import statsmodels.formula.api as smf
import statsmodels.api as sm


dat = pd.read_csv("C:/Users/schmi/Desktop/Regression/Mieten_Essen_Export.csv", sep=",", na_values=0)

df = dat >> select(X.Parkplaetze, X.Kaltmiete, X.AnzZimmer, X.Quartier, X.Wohnflaeche) >> \
     filter_by(X.Parkplaetze > 0, X.Kaltmiete > 0, X.AnzZimmer > 0)

df['Quartier'] = pd.Categorical(df.Quartier)

est = smf.ols(formula="Kaltmiete ~ Quartier + AnzZimmer + Wohnflaeche", data=df).fit()
print(est.summary())

# model values
model_fitted_y = est.fittedvalues
# model residuals
model_residuals = est.resid
# normalized residuals
model_norm_residuals = est.get_influence().resid_studentized_internal
# absolute squared normalized residuals
model_norm_residuals_abs_sqrt = np.sqrt(np.abs(model_norm_residuals))
# absolute residuals
model_abs_resid = np.abs(model_residuals)
# leverage, from statsmodels internals
model_leverage = est.get_influence().hat_matrix_diag
# cook's distance, from statsmodels internals
model_cooks = est.get_influence().cooks_distance[0]


# Plot
##gefittete Werte vs. Residuen
plt.figure(1)
plot_lm_1 = plt.subplot(331)
plot_lm_1 = sns.residplot(model_fitted_y, model_residuals,
                                  lowess=True,
                                  scatter_kws={'alpha': 0.5},
                                  line_kws={'color': 'red', 'lw': 1, 'alpha': 0.8})

plot_lm_1.set_title('Linearer Zusammenhang')
plot_lm_1.set_xlabel('Fitted values')
plot_lm_1.set_ylabel('Residuals')


##Theorethische Werte nach Normalverteilung vs. Standardisierte Residuen

plot_lm_2 = plt.subplot(333)
QQ = stats.probplot(model_norm_residuals)   #ProbPlot(model_norm_residuals)
#plot_lm_2 =QQ.qqplot(line='45', alpha=0.5, color='#4C72B0', lw=1)
plot_lm_2.set_title('Normalverteilte Residuen')
plot_lm_2.set_xlabel('Theoretical Quantiles')
plot_lm_2.set_ylabel('Standardized Residuals');
# annotations
abs_norm_resid = np.flip(np.argsort(np.abs(model_norm_residuals)), 0)
abs_norm_resid_top_3 = abs_norm_resid[:3]
#for r, i in enumerate(abs_norm_resid_top_3):
#    plot_lm_2.annotate(i,
 #                      xy=(np.flip(QQ.theoretical_quantiles, 0)[r],
#                           model_norm_residuals[i]));



plot_lm_3 = plt.subplot(337)
plt.scatter(model_fitted_y, model_norm_residuals_abs_sqrt, alpha=0.5);
sns.regplot(model_fitted_y, model_norm_residuals_abs_sqrt,
              scatter=False,
              ci=False,
              lowess=True,
              line_kws={'color': 'red', 'lw': 1, 'alpha': 0.8});
plot_lm_3.set_title('Homosekedastische Residuen')
plot_lm_3.set_xlabel('Fitted values')
plot_lm_3.set_ylabel('$\sqrt{|Standardized Residuals|}$');

# annotations
abs_sq_norm_resid = np.flip(np.argsort(model_norm_residuals_abs_sqrt), 0)
abs_sq_norm_resid_top_3 = abs_sq_norm_resid[:3]
#for i in abs_norm_resid_top_3:
#    plot_lm_3.annotate(i,
#                      xy=(model_fitted_y[i],
#                          model_norm_residuals_abs_sqrt[i]));


plot_lm_4 = plt.subplot(339)
plt.scatter(model_leverage, model_norm_residuals, alpha=0.5);
sns.regplot(model_leverage, model_norm_residuals,
              scatter=False,
              ci=False,
              lowess=True,
              line_kws={'color': 'red', 'lw': 1, 'alpha': 0.8});
plot_lm_4.set_xlim(0, max(model_leverage)+0.01)
plot_lm_4.set_ylim(-3, 5)
plot_lm_4.set_title('Ausrei√üers')
plot_lm_4.set_xlabel('Leverage')
plot_lm_4.set_ylabel('Standardized Residuals');

# annotations
leverage_top_3 = np.flip(np.argsort(model_cooks), 0)[:3]
for i in leverage_top_3:
      plot_lm_4.annotate(i,
                                 xy=(model_leverage[i],
                                     model_norm_residuals[i]));

plt.show()
